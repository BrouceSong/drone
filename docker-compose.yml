version: '2'

services:
  drone-server:
    image: drone/drone:1
    container_name: drone-server
    # networks:
    #   - dronenet        # 让drone-server和drone-agent处于一个网络中，方便进行RPC通信
    ports:
      - '10081:80'      # Web管理面板的入口 PROTO=http  时使用该端口
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock   # docker.sock [1]
      - /var/data/drone/:/var/lib/drone             # drone数据存放路径
    environment:
      - DRONE_GITHUB_CLIENT_ID=${DRONE_GITHUB_CLIENT_ID}
      - DRONE_GITHUB_CLIENT_SECRET=${DRONE_GITHUB_CLIENT_SECRET}
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
      - DRONE_SERVER_HOST=49.232.18.147:10081
      - DRONE_SERVER_PROTO=${DRONE_SERVER_PROTO}
      - TZ=Asia/Shanghai
    restart: always
  drone-agent:
    image: drone/drone-runner-docker:1
    container_name: drone-runner
    # networks:
    #   - dronenet     # 让drone-server和drone-agent处于一个网络中，方便进行RPC通信
    depends_on:
      - drone-server
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # docker.sock [1]
    environment:
      - DRONE_RPC_PROTO=${DRONE_SERVER_PROTO}
      - DRONE_RPC_HOST=49.232.18.147:10081
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
      - DRONE_RUNNER_CAPACITY=2
      - DRONE_RUNNER_NAME=49.232.18.147
      - TZ=Asia/Shanghai
    restart: always
# networks:
#   dronenet: # 让drone-server和drone-agent处于一个网络中，方便进行RPC通信
